import React ,{useState,useEffect}from "react";
import style from "../../Styles/StyleFrom.module.css"
import { putRecipe, getIngredients } from "../../actions/index";
import { Formik, useFormik,setValues, Form, Field , FieldArray,ErrorMessage} from "formik";
import { useDispatch, useSelector } from "react-redux";
import SelectCard from "../CreateRecipe/SelectCard/SelectCard";


export default function UpdateForm() {

  const dispatch = useDispatch();
  const update = useSelector(state => state.detail)
  
  const ingre = useSelector((state) => state.ingredients);
  const ingre2 = update.ingredients;
  
      console.log(ingre2,'ingre')

         useEffect(() => {
          dispatch(getIngredients());
        }, [dispatch]);
            
        
      function  eliminar(e){
          console.log ((e.target.value),'entre')
          console.log((update.ingredients[2].ingredient.name))
           var arr=[]
          for(let i=0;i<update.ingredients.length;i++){
            if(update.ingredients[i].ingredient.name !== e.target.value){
              arr.push(update.ingredients[i])}
          }
          console.log(arr,'arraynuevo')
                    
          }

          function addIngre(){}
          
   return (
      <div class={style.centrado}>
        <Formik
          initialValues = {{}}
          
            validate ={ (values) => {
              //aca van las validaciones
              let error = {};
          
              if (!/^[a-zA-Z\s]*$/.test(values.name)) {
                error.name = "No es texto";
              }
          
            if (!/^[a-zA-Z\s]*$/.test(values.preparation)) {
                error.preparation = "No es texto";
              }

             return error;
            }}

          onSubmit={(valores)=>{ //valores me da los datos que ingreso en el form
             console.log('formulario enviado')
              console.log(valores)
              }}
        >
    {({values,errors,handleSubmit,handleChange,handleBlur,touched})=>(
          <Form class={style.forms} onSubmit={handleSubmit}>
          <div div class="mb-3">
            <label class="form-label">Nombre</label>
            <Field
              type='text'
              id='name'
              name="name"
              class="form-control"
            />
            {errors.name && touched.name === true &&<div class="cosoForm">{errors.name}</div>}

          </div>
  
          <div >
            <label class="form-label">Ingredientes</label>
          <FieldArray
              defaultValue="none"
              name={values?.ingredients}
              id="ingredients"
              class="form-control"
              >
              {ingre2?.map((e) => {
                return (
                  <button onClick={(e)=>eliminar(e)} value={e.ingredient.name} key={e.ingredient.id}>
                    {e.ingredient.name} {e.amount} {e.unit.name}
                   </button>
                );
              })}
             </FieldArray> 

              <h3>Agregar ingrediente</h3>
              {/* <div
              defaultValue="none"
              onChange={handleChange}
              name={`ingredients[${values.ingredients.length}].ingredient`}
              id="ingredients"
              class="form-control"
            >
              {ingre?.map((e) => {
                return (
                  <button onClick={(e)=>addIngre(e)} value={e.ingredient.name} key={e.ingredient.id}>
                    {e.ingredient.name} {e.amount} {e.unit.name}
                   </button>
                );
              })}
  
            <div class={style.buttonsRemove}>
               {values.ingredients.length > 0 &&
                values.ingredients.map((e, index) => {
  
                  return <SelectCard ingredient={e.ingredient} name={`ingredients[${index}]`} handleChange={handleChange} />
                })}
            </div>
          </div>*/}
          </div> 
  
          <div class="mb-3">
            <label class="form-label">Dificultad</label>
            <Field
              as= 'select'
              name="difficulty"
              class="form-control"
            >
              <option defaultValue={update.difficulty}>{update.difficulty}</option>
              <option name="difficulty" value="Fácil"> Fácil </option>
              <option name="difficulty" value="Moderado"> Moderado </option>
              <option name="difficulty" value="Difícil"> Difícil</option>
            </Field>
          </div>
  
          <div class="mb-3">
            <label class="form-label">Preparacion</label>
            <Field
              as='textarea'
              class="form-control"
              name="preparation"
              type="text"
             >
            {errors.preparation && touched.preparation && <div class="cosoForm">{errors.preparation}</div>}
            </Field>
          </div>
  
          <div class="mb-3">
            <label class="form-label">Imagen</label>
            <Field
              onChange={handleChange}
              value={values.img||update.img}
              onBlur={handleBlur}
              class="form-control"
              name="img"
              type="text"
             
            />
            {errors.img && touched.img && <div class="cosoForm">{errors.img}</div>}
          </div>

          <div class="col-auto">
            <button type="submit" class="btn btn-primary mb-3">
              Actualizar
            </button>
          </div>
        </Form>

        )}
        </Formik>
      </div>
    );
  
}
